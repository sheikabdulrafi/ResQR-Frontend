import { useEffect, useState, useRef } from "react";
import { QRCodeSVG } from "qrcode.react";
import jsPDF from "jspdf";
import "svg2pdf.js"; // required for pdf.svg() to work
import axios from "axios";
import LoadingPage from "./LoadingPage";

const QRPage = () => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const offlineRef = useRef();
  const onlineRef = useRef();

  useEffect(() => {
    const fetchUserAndQR = async () => {
      try {
        // Step 1: verify session
        const res = await axios.get("https://resqr-ckss.onrender.com/user/verify", {
          withCredentials: true,
        });

        let verifiedUser = res.data.data;
        const localUser = JSON.parse(localStorage.getItem("user"));
        let userData = { ...localUser, ...verifiedUser };

        setUser(userData);

        // Step 2: issue QR if not generated
        if (!userData?.hasGeneratedQR) {
          const issueRes = await axios.post(
            "https://resqr-ckss.onrender.com/user/qr/issued",
            {},
            { withCredentials: true }
          );
          const updatedUser = issueRes.data.data;
          localStorage.setItem("user", JSON.stringify(updatedUser));
          setUser(updatedUser);
        }
      } catch (err) {
        console.error("Error verifying or issuing QR:", err);
      } finally {
        setLoading(false);
      }
    };

    fetchUserAndQR();
  }, []);

  const downloadPDF = async () => {
    const pdf = new jsPDF({
      orientation: "portrait",
      unit: "mm",
      format: "a4",
    });

    const pageWidth = pdf.internal.pageSize.getWidth();
    const margin = 20;

    // Title
    pdf.setFontSize(24);
    pdf.setTextColor("#0066cc");
    pdf.text("ResQR - Emergency Alert System", pageWidth / 2, 30, {
      align: "center",
    });

    // Subtitle
    pdf.setFontSize(14);
    pdf.setTextColor("#333");
    pdf.text(`User: ${user.firstName} ${user.lastName}`, pageWidth / 2, 40, {
      align: "center",
    });

    // Draw card background
    pdf.setDrawColor(180);
    pdf.setFillColor(245, 248, 255);
    pdf.roundedRect(margin, 50, pageWidth - margin * 2, 200, 8, 8, "F");

    const offlineSvg = offlineRef.current?.querySelector("svg");
    const onlineSvg = onlineRef.current?.querySelector("svg");

    let qrSize = 70;
    let yPos = 90;

    // Offline QR Label
    pdf.setFontSize(16);
    pdf.setTextColor("#00509e");
    pdf.text("Offline QR (SMS Mode)", pageWidth / 4, yPos - 10, {
      align: "center",
    });

    // Online QR Label
    pdf.text("Online QR (Web Mode)", (pageWidth * 3) / 4, yPos - 10, {
      align: "center",
    });

    // Embed the QRs
    if (offlineSvg)
      await pdf.svg(offlineSvg, { x: pageWidth / 4 - qrSize / 2, y: yPos, width: qrSize, height: qrSize });
    if (onlineSvg)
      await pdf.svg(onlineSvg, { x: (pageWidth * 3) / 4 - qrSize / 2, y: yPos, width: qrSize, height: qrSize });

    // Footer
    pdf.setFontSize(10);
    pdf.setTextColor("#666");
    pdf.text("Generated by ResQR | Secure Guardian System", pageWidth / 2, 280, {
      align: "center",
    });

    pdf.save("ResQR_QR_Codes.pdf");
  };

  if (loading) return <LoadingPage />;
  if (!user) return <p>Please login to access this page.</p>;

  const offlineValue = `smsto:+919398969766:QR_SCANNED_ID:${user.id}`;
  const onlineValue = `https://sheikabdulrafi.github.io/lifesaver/?id=${user.id}`;

  return (
    <section
      style={{
        minHeight: "100vh",
        background: "linear-gradient(135deg, #e3f2fd 0%, #bbdefb 100%)",
        display: "flex",
        flexDirection: "column",
        alignItems: "center",
        justifyContent: "center",
        padding: "40px 20px",
      }}
    >
      <div
        style={{
          background: "white",
          borderRadius: "16px",
          boxShadow: "0 6px 20px rgba(0,0,0,0.15)",
          padding: "30px 40px",
          textAlign: "center",
          maxWidth: "600px",
          width: "100%",
        }}
      >
        <h1 style={{ color: "#0066cc", fontSize: "28px", marginBottom: "10px" }}>
          ResQR - Emergency Alert System
        </h1>
        <p style={{ color: "#555", marginBottom: "30px" }}>
          Hello, <strong>{user.firstName}</strong>. These are your personal QR codes for emergency access.
        </p>

        <div
          style={{
            display: "flex",
            gap: "40px",
            justifyContent: "center",
            flexWrap: "wrap",
          }}
        >
          <div
            ref={offlineRef}
            style={{
              border: "2px solid #90caf9",
              borderRadius: "12px",
              padding: "15px",
              background: "#e3f2fd",
              boxShadow: "inset 0 0 10px rgba(0,0,0,0.05)",
            }}
          >
            <h3 style={{ color: "#0d47a1" }}>Offline QR</h3>
            <QRCodeSVG value={offlineValue} size={150} />
          </div>

          <div
            ref={onlineRef}
            style={{
              border: "2px solid #81c784",
              borderRadius: "12px",
              padding: "15px",
              background: "#e8f5e9",
              boxShadow: "inset 0 0 10px rgba(0,0,0,0.05)",
            }}
          >
            <h3 style={{ color: "#1b5e20" }}>Online QR</h3>
            <QRCodeSVG value={onlineValue} size={150} />
          </div>
        </div>

        <button
          onClick={downloadPDF}
          style={{
            marginTop: "30px",
            backgroundColor: "#1976d2",
            color: "white",
            border: "none",
            borderRadius: "8px",
            padding: "12px 24px",
            fontSize: "16px",
            cursor: "pointer",
            transition: "all 0.3s ease",
          }}
          onMouseEnter={(e) => (e.target.style.backgroundColor = "#0d47a1")}
          onMouseLeave={(e) => (e.target.style.backgroundColor = "#1976d2")}
        >
          Download PDF
        </button>
      </div>
    </section>
  );
};

export default QRPage;
